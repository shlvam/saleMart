const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const {validationResult} = require('express-validator');

const User = require('../models/user');

// for sending mail
const nodemailer = require('nodemailer');
var transport = nodemailer.createTransport({
  host: "smtp.mailtrap.io",       // for linking with online email server
  port: 2525,
  auth: {
    user: "b6cf48481246cb",   // generated by mailtrap
    pass: "01ff64f03dec7f"
  }
});

exports.getLogin = (req, res, next) => {
  // console.log(req.flash('error'));   // gives a array of messages for key='error'
  let message = req.flash('error');     //inside ' ...'  since error is not defined auth.js  but it is in session DB
  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }
  res.render('auth/login', {      //exceptional
    pageTitle: 'Login',
    path: '/login',
    // isAuthenticated: false,    // undefined is by default considered false 
    errorMessage: message
  });
};

exports.postLogin = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  User.findOne({ email: email })
    .then(user => {
      if (!user) {
        req.flash('error', 'User does not exist');    // key, value pair
        console.log('User does not exist');
        return res.redirect('/login');
      }
      bcrypt
        .compare(password, user.password)
        .then((pas_match) => {
          if (!pas_match) {
            req.flash('error', 'Username or password is incorrect');
            console.log('password is incorrect');
            return res.redirect('/login');
          }
          req.session.user = user;
          req.session.isLogedIn = true;
          req.session
            .save((result) => {
              res.redirect('/');
            });

        })
        .catch(err => {
          console.log(err);
          const error= new Error(err);
          error.httpStatusCode=500;
          next(error);
        });

    })
    .catch(err => {
      console.log(err);
      const error= new Error(err);
      error.httpStatusCode=500;
      next(error);
    });
};

exports.getLogout = (req, res, next) => {
  req.session.destroy((err) => {
    console.log(err);
    res.redirect('/');
  });
};

exports.getSignup = (req, res, next) => {
  let message = req.flash('error');     //inside ' ...'  since error is not defined auth.js  but it is in session DB
  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }

  res.render('auth/signup.ejs', {
    pageTitle: 'Signup',
    path: '/signup',
    isAuthenticated: false,
    errorMessage: message,
    oldInput: {
      email:"",
      password: "",
      conf_password: ""
    }
  });
};

exports.postSignup = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;
  const conf_password = req.body.conf_password;
  const val_err=validationResult(req);      // validation_errors

  if(!val_err.isEmpty()){
    res.status(400);          // invalid input
    return res.render('auth/signup.ejs', {
      pageTitle: 'Signup',
      path: '/signup',
      errorMessage: val_err.array()[0].msg,
      oldInput: {
        email:email,
        password: password,
        conf_password: conf_password
      }
    });;
  }

  User
    .findOne({ email: email })
    .then((user) => {
      if (user) {
        req.flash('error', 'You are already signedUp!. Please signin.');
        console.log("You are already signedUp!. Please signin.");
        res.redirect('/login');
      } else {
        bcrypt
          .hash(password, 12)
          .then((hassed_password) => {   // callback function
            const user1 = new User({
              email: email,
              password: hassed_password,
              cart: {
                item: []
              }
            });
            return user1.save();
          })
          .then((result) => {
            res.redirect('/login');
            return transport.sendMail({
              to: email,
              from: 'shop@node-complete.com',
              subject: 'Signed up successfully!!!!!!',
              html: '<h1>Congrats! Your account was created successfully. </h1>'
            });
          })
          .catch(err => {
            console.log(err);
            const error= new Error(err);
            error.httpStatusCode=500;
            next(error);
          });
      }
    })
    .catch(err => {
      console.log(err);
      const error= new Error(err);
      error.httpStatusCode=500;
      next(error);
    });

};

exports.getReset = (req, res, next) => {
  let message = req.flash('error');     //inside ' ...'  since error is not defined auth.js  but it is in session DB
  if (message.length > 0) {
    message = message[0];
  } else {
    message = null;
  }
  res.render('auth/reset', {
    pageTitle: 'Reset Password',
    path: '/reset',
    errorMessage: message
  });
};

exports.postReset = (req, res, next) => {
  crypto.randomBytes(32, (err, buffer) => {
    if (err) {
      console.log(err);
      return res.redirect('/reset');   //get method
    }
    const token = buffer.toString('hex');   // buffer is in hexadecimal form
    const email = req.body.email;
    User.findOne({ email: email })
      .then((user) => {
        if (!user) {
          req.flash('error', 'Your E-mail is not registered');
          return res.redirect('/reset');
        }

        user.resetToken = token;
        user.tokenExp = Date.now() + 3600000;    // 1 hour=3,600,000 msec
        // console.log(user.tokenExp);
        user.save()
          .then((result) => {
            res.redirect('/');
            return transport.sendMail({
              to: email,
              from: 'shop@node-complete.com',
              subject: 'Password reset.',
              html: `
              <h1>Link to change your password: </h1>
              <a href="http://localhost:80/reset/${token}" class="link">click here...</a>
              <p>It will expire in 1 hour.</p>
            `
            });
          })
          .catch(err => {
            console.log(err);
            const error= new Error(err);
            error.httpStatusCode=500;
            next(error);
          });
      }).catch(err => {
        console.log(err);
        const error= new Error(err);
        error.httpStatusCode=500;
        next(error);
      });
  });
};

exports.getNewPassword = (req, res, next) => {
  const token = req.params.token;       // token in link sent

  User.findOne({ resetToken: token, tokenExp: { $gt: Date.now() } })
    .then((user) => {
      if (!user) {
        req.flash('error', 'User does not exist or link expired');    // key, value pair
        console.log('User does not exist or link expired');
        return res.redirect('/login');
      }
      res.render('auth/new_password', {
        pageTitle: 'New Password',
        path: '/new_password',
        email: user.email,
        tokenExp: user.tokenExp
      });
    }).catch(err => {
      console.log(err);
      const error= new Error(err);
      error.httpStatusCode=500;
      next(error);
    });
};

exports.postNewPassword = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;
  const conf_password = req.body.conf_password;
  const tokenExp = req.body.tokenExp;

  if (tokenExp < Date.now()) {
    req.flash('error', 'link expired');    // key, value pair
    console.log('link expired');
    return res.redirect('/login');      //error
  }

  User.findOne({email: email})
  .then((user) => {
    bcrypt.hash(password, 12)
    .then((hassed_password) => {
      user.password=hassed_password;
      user.tokenExp=undefined;      // deleting password reset things-> only one time reset
      user.resetToken=undefined;
      return user.save();
    }).catch(err => {
      console.log(err);
      const error= new Error(err);
      error.httpStatusCode=500;
      next(error);
    });
  })
  .then((result)=> {
    res.redirect('/login');
  }).catch(err => {
    console.log(err);
    const error= new Error(err);
    error.httpStatusCode=500;
    next(error);
  });
};